{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","account","contract","interactBox","bind","assertThisInitialized","loadWeb3","window","web3","eth","getAccounts","accounts","setState","defaultAccount","abi","ethAds","Contract","methods","getBoxCount","box_count_promise","box_count","parseInt","_hex","c","document","getElementById","children","i","getUrl","box_url","src","ethereum","Web3","enable","currentProvider","alert","_box_index","getPrice","pricePromise","price","isBoxOwned","getOwner","boxOwner","console","log","prompt","newUrl","setUrl","newPrice","setPrice","buyOwnedBox","send","value","utils","toWei","toString","buyEmptyBox","url","_this2","react_default","a","createElement","class","id","name","onClick","alt","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df9bc369.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3'\nimport './App.css';\nimport ethAds from '../abis/ethereumAds.json';\n\nclass App extends Component {\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    const web3 = await window.web3;\n\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    web3.eth.defaultAccount = this.state.account;\n    \n    const contract_address = \"0x783a37A8E947e9D99dc484AE1410A294C93C66bA\"; \n    const abi = ethAds.abi;\n\n    await this.setState({contract: await new web3.eth.Contract(abi, contract_address)}) // Use this to call the contract\n\n    var box_count_promise = await this.state.contract.methods.getBoxCount().call();\n    const box_count = parseInt(box_count_promise._hex, 16)\n    \n    var c = document.getElementById(\"grid\").children;\n    var i;\n    for (i = 0; i < box_count; i++) {\n      const box_url = await this.state.contract.methods.getUrl(i).call();\n      c[i].src = box_url;\n    }\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert(\"Web3 not supported in your browser.\")\n    }\n  }\n\n  async interactBox(_box_index) {\n    const web3 = await window.web3;\n\n    var pricePromise = await this.state.contract.methods.getPrice(_box_index).call();\n    const price = parseInt(pricePromise._hex, 16)\n\n    var isBoxOwned = await this.state.contract.methods.isBoxOwned(_box_index).call();\n    var boxOwner = await this.state.contract.methods.getOwner(_box_index).call();\n\n    if (isBoxOwned) {\n      if (boxOwner == this.state.account) { // Owned by caller, set URL or price\n        console.log(\"Owned by you, set URL or price\");\n        var newUrl = await window.prompt(\"Enter new image URL\", \"\"); // update html url\n        if(newUrl != null && newUrl != \"\"){ \n          this.setUrl(_box_index, newUrl); \n        }\n        \n        var newPrice = await window.prompt(\"Enter the new price in wei\", \"\"); // update price in blockchain\n        if(newPrice != null && newPrice != \"\"){ \n          this.setPrice(_box_index, newPrice); \n        }\n      }\n      else { // Owned by another address, read the price and offer the transaction to the caller\n        console.log(\"Owned by another address\");\n        await this.state.contract.methods.buyOwnedBox(_box_index).send({ value: web3.utils.toWei(price.toString(), 'wei') });\n      }\n    }\n    else { // No owner\n      console.log(\"No owner, buying this\");\n      await this.state.contract.methods.buyEmptyBox(_box_index).send({ value: web3.utils.toWei(\"100\", 'wei') });\n    }\n  }\n\n  async setUrl(_box_index, url){\n    await this.state.contract.methods.setUrl(_box_index, url).send();\n    // TODO: Change the image without refreshing\n  }\n\n  async setPrice(_box_index, price){\n    await this.state.contract.methods.setPrice(_box_index, price).send();\n  }\n\n  // TODO: Rent\n\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: \"\",\n      contract: \"\"\n    }\n    this.interactBox = this.interactBox.bind(this)\n  }\n\n  render() {\n    return (\n      <div class=\"grid\" id=\"grid\">\n        <img name=\"grid0\" class=\"grid-item\" src=\"\" onClick={() => this.interactBox(0)} alt=\"\"></img>\n        <img name=\"grid1\" class=\"grid-item\" src=\"\" onClick={() => this.interactBox(1)} alt=\"\"></img>\n        <img name=\"grid2\" class=\"grid-item\" src=\"\" onClick={() => this.interactBox(2)} alt=\"\"></img>\n        <img name=\"grid3\" class=\"grid-item\" src=\"\" onClick={() => this.interactBox(3)} alt=\"\"></img>\n        <img name=\"grid4\" class=\"grid-item\" src=\"\" onClick={() => this.interactBox(4)} alt=\"\"></img>\n        <img name=\"grid5\" class=\"grid-item\" src=\"\" onClick={() => this.interactBox(5)} alt=\"\"></img>\n        <img name=\"grid6\" class=\"grid-item\" src=\"\" onClick={() => this.interactBox(6)} alt=\"\"></img>\n        <img name=\"grid7\" class=\"grid-item\" src=\"\" onClick={() => this.interactBox(7)} alt=\"\"></img>\n        <img name=\"grid8\" class=\"grid-item\" src=\"\" onClick={() => this.interactBox(8)} alt=\"\"></img>\n        <img name=\"grid9\" class=\"grid-item\" src=\"\" onClick={() => this.interactBox(9)} alt=\"\"></img>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}